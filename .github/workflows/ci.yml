name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_FILE: tictactoe.xcodeproj
  IOS_SCHEME: tictactoe iOS
  MACOS_SCHEME: tictactoe macOS
  TEST_PLAN: tictactoeTests

jobs:
  swiftlint:
    name: SwiftLint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: SwiftLint
        uses: norio-nomura/action-swiftlint@3.2.1
        with:
          args: --strict

  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    permissions:
      contents: read
    strategy:
      matrix:
        xcode-version: ['15.4', 'latest-stable']
        include:
          - xcode-version: '15.4'
            ios-version: '17.5'
            macos-version: '14.5'
          - xcode-version: 'latest-stable'
            ios-version: 'latest'
            macos-version: 'latest'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ matrix.xcode-version }}-${{ hashFiles('**/*.xcodeproj', '**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-xcode-${{ matrix.xcode-version }}-
            ${{ runner.os }}-xcode-

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode-version }}

      - name: Show build version
        run: |
          xcodebuild -version
          swift --version

      - name: Build for iOS Simulator
        run: |
          xcodebuild clean build \
            -project "$PROJECT_FILE" \
            -scheme "$IOS_SCHEME" \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=${{ matrix.ios-version }}" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO | xcpretty && exit ${PIPESTATUS[0]}

      - name: Test iOS
        run: |
          xcodebuild test \
            -project "$PROJECT_FILE" \
            -scheme "$IOS_SCHEME" \
            -destination "platform=iOS Simulator,name=iPhone 15,OS=${{ matrix.ios-version }}" \
            -testPlan "$TEST_PLAN" \
            -enableCodeCoverage YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO | xcpretty && exit ${PIPESTATUS[0]}

      - name: Build for macOS
        run: |
          xcodebuild clean build \
            -project "$PROJECT_FILE" \
            -scheme "$MACOS_SCHEME" \
            -destination "platform=macOS,arch=x86_64" | xcpretty && exit ${PIPESTATUS[0]}

      - name: Test macOS
        run: |
          xcodebuild test \
            -project "$PROJECT_FILE" \
            -scheme "$MACOS_SCHEME" \
            -destination "platform=macOS,arch=x86_64" \
            -testPlan "$TEST_PLAN" \
            -enableCodeCoverage YES | xcpretty && exit ${PIPESTATUS[0]}

      - name: Generate code coverage report
        if: matrix.xcode-version == 'latest-stable'
        run: |
          xcrun xccov view --report --json ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult > coverage.json
          xcrun xccov view --report ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult

      - name: Upload coverage reports to Codecov
        if: matrix.xcode-version == 'latest-stable'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.json
          fail_ci_if_error: false

  build-spm:
    name: Swift Package Manager Build
    runs-on: macos-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Cache SPM dependencies
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build with SPM (if Package.swift exists)
        run: |
          if [ -f Package.swift ]; then
            swift build
            swift test
          else
            echo "No Package.swift found, skipping SPM build"
          fi
